(begin-tx)

(interface ifaceA
  (defun opA1:bool (s:string))

  )


(module implA G
  (defcap G () true)
  (implements ifaceA)
  (defun opA1:bool (s:string) true)
  )

(define-namespace 'ns (sig-keyset) (sig-keyset))

(namespace 'ns)

(interface ifaceB
  (defun opB1:bool (s:string))

  )



(module implAB G
  (defcap G () true)
  (implements ifaceA)
  (implements ifaceB)
  (defun opA1:bool (s:string) true)
  (defun opB1:bool (s:string) true)
  )

(commit-tx)

(begin-tx)

(module test G
  (defcap G () true)
  (defun testAImpl (aImpl:module{ifaceA})
    (aImpl::opA1 "hi")
    )

  (defun callTestAImpl ()
    (testAImpl implA)
    (testAImpl ns.implAB)
    )
  )

(commit-tx)
(begin-tx)

(module test2 G
  (defcap G () true)

  (defun callTestAImpl ()
    (let
      ((a (test.testAImpl implA))
       (b (test.testAImpl ns.implAB)))

      (format "{}{}" [a b])
    )
  )
)

(test.testAImpl implA)
(test.testAImpl ns.implAB)
(test.callTestAImpl)
(test2.callTestAImpl)
