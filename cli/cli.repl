
(module cli G
  (defcap G () (enforce false "X"))

  (defschema keydata
    public:string
    secret:string
    address:string
    scheme:string)

  (defschema cap
    name:string
    args:list
    signers:[string])

  (defschema data
    sender:string
    ttl:integer
    network-id:string
    creation-time:time
    nonce:string
    host:string
    chain-id:integer
    chain-count:integer
    signers:[string]
    caps:[object{cap}]
    )

  (defconst PACT_CHAIN_ID:integer -1
    "chain id of a pact -s server")

  (deftable state:{data})
  (defconst S "S")

  (deftable keystore:{keydata})

  (defun init ()
    (write
     state S
     { 'sender: "sender"
     , 'ttl: 150000
     , 'network-id: "mainnet01"
     , 'creation-time: (parse-time "%F" "1970-01-01")
     , 'nonce: "nonce"
     , 'host: "us-e1.chainweb.com"
     , 'chain-id: 0
     , 'chain-count: 20
     , 'signers: []
     , 'caps: []
     }))

  (defun sender (s:string)
    (update state S { 'sender: s }))

  (defun cli-state () (read state S))

  (defun update-state (u:object)
    (update state S u))

  (defun ttl (i:integer)
    (update-state { 'ttl: i }))

  (defun network-id (s:string)
    (update-state { 'network-id: s }))

  (defun creation-time (s:string)
    (update-state { 'creation-time: (time s) }))

  (defun nonce (s:string)
    (update-state { 'nonce: s }))

  (defun host (h:string)
    (update-state { 'host: h }))

  (defun chain-id (i:integer)
    (update-state { 'chain-id: i }))

  (defun add-key (id:string key:object{keydata})
    (write keystore id key))

  (defun add-key1 (key:string)
    (add-key key { 'public: key, 'secret: "", 'address: "", 'scheme: "" }))

  (defun add-cap1 (name:string args:list signers:[string])
    (let ((ss (map (add-signer) signers)))
      (update-state
       { 'caps:
         (+ [{ 'name: name
             , 'args: args
             , 'signers: ss }]
            (at 'caps (read state S)))})))


  (defun add-signer1 (signer:string)
    "Unsafe add of signer, not checked against keystore"
    (let ((ss (at 'signers (read state S))))
      (if (contains signer ss) ""
        (update-state
         { 'signers: (+ [signer] ss) }))
      signer))

  (defun add-signer (signer:string)
    "Matches SIGNER to keystore to add to signers list."
    (let ((matched (fold (match-key signer) "" (keys keystore))))
      (enforce (!= "" matched) "Key not found")
      (add-signer1 matched)))

  (defun match-key (part:string r:string key:string)
    (if (= part (take (length part) key))
        (let ((x 0))
          (enforce (= "" r) "Multiple matches found")
          key)
      r))


)
(create-table state)
(create-table keystore)
(init)
(env-gaslimit 5000)
(env-gasprice 0.00000000001)
