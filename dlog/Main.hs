{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}

module Main where

import Control.Monad
import Control.Monad.IO.Class
import Control.Monad.Random.Class
import Control.Monad.Trans.Random.Strict
import Data.Text(Text)
import qualified Data.Text as T
import Numeric
import System.Random

import Pact.Gas.Table
import Pact.Types.SizeOf
-- import Pact.Types.Util
-- import Pact.Types.Term
import Pact.Repl.Types
import Pact.Repl
import Pact.Types.Gas
import Pact.Types.PactValue
import Pact.Types.Pretty


main :: IO ()
main = do
  let argCalcs = filter (\((l, r), g) -> (intCost l + intCost r) /= g) args
  if (not (null argCalcs)) then do
    putStrLn "Gas discrepancies detected!"
    putStrLn $ unlines (format <$> argCalcs)
  else
    putStrLn "Gas matched in GIntegerOps"
  where
  format :: ((Integer, Integer), Gas) -> String
  format ((l, r), g) = unwords ["(GIntegerOpCost", show l, show r, ") did not equal gas: ", show g]
  -- d <- genDouble
  -- writeFile "dlog.txt" (concat d)

-- intGenTest :: IO ()
-- intGenTest = forM_ [-100000000000000000000000000000000 .. 1000000000000000000000000000000000] $ \i -> print [fromIntegral (sizeOf i), intCost i]

dtt :: Double -> Text
dtt i = T.pack $ showFFloat Nothing i ""

pactTx :: Double -> Double -> Text
pactTx i j = T.unlines
  [ "(env-gasmodel \"table\")"
  , "(env-gaslimit 150000000)"
  , T.unwords ["[(*", dtt i, dtt j, ")", "(exp", dtt i , ")", "(sqrt", dtt (abs j), ") (env-gas)]"]
  ]

genDouble :: IO [String]
genDouble = flip evalRandT (mkStdGen 112858595496370454) $ replicateM 1000000 $ do
  i <- getRandomR (-100000000000000000000000000000000 :: Double, 1000000000000000000000000000000000)
  j <- getRandomR (-100000000000000000000000000000000 :: Double, 1000000000000000000000000000000000)
  let ptx = pactTx i j
  s <- either id (either T.unpack renderCompactString . toPactValue) <$> liftIO (evalRepl StringEval (T.unpack ptx))
  pure (s <> "\n")

-- from logs
-- (":GIntegerOpCost:134699444212584977667:50000",0),
-- (":GIntegerOpCost:700000000000214:50000",0),
-- (":GIntegerOpCost:700000000000214:50000",0),
-- (":GIntegerOpCost:12020670425990641888347454369068145751953125:1907389171422",3),
-- (":GIntegerOpCost:1:288507",0),
-- (":GIntegerOpCost:172860268057275736062015061417832469681223691216411740185828125553714618258759292959560893587580934241103225257246291299707070419516946695614604819153054963669573208911106730476132890228111582230701691602003756911424530280029935929314390848158752457654991:114976",110),
-- (":GIntegerOpCost:173860268057275736062015061417832469681223691216411740185828125553714618258759292959560893587580934241103225257246291299707070419516946695614604819153054963669573208911106730476132890228111582230701691602003756911424530280029935929314390848158752457654991:1",110),
-- (":GIntegerOpCost:6085109382:285714285714504081632652994466472303227405964181584764462378772657721501346644639426731168638803827899873279972613467311551229597136182909808875509796144143772719464504618054335137159623388972354057992514166045128002812094775153426016740167381189168005972",110),
-- (":GIntegerOpCost:1:714285714285495918367347005533527696772594035818415235537621227342278498653355360573268831361196172100126720027386532688448770402863817090191124490203855856227280535495381945664862840376611027645942007485833954871997187905224846573983259832618810831994028",110),
-- (":GIntegerOpCost:50000:700000000000214",0),
-- (":GIntegerOpCost:607510938174979533823716337792575359344482421875:1",3),
-- (":GIntegerOpCost:114976:528380651766437807737020193599164485931396484375",3),
-- (":GIntegerOpCost:1907389171422:-9699535970868310",0),
-- (":GIntegerOpCost:700000000000214:50000",0),
-- (":GIntegerOpCost:134829396310592344671:50000",0),
-- (":GIntegerOpCost:152439769464614659229:17610873154022314558",0),
-- (":GIntegerOpCost:165149035419536:50000",0),
-- (":GIntegerOpCost:134829396310592344671:50000",0),
-- (":GIntegerOpCost:500:50000",0),
-- (":GIntegerOpCost:700000000000214:50000",0),
-- (":GIntegerOpCost:17610373154022314558:50000",0),
-- (":GIntegerOpCost:134829396310592344671:50000",0),
-- (":GIntegerOpCost:152439769464614659229:17610373154022314558",0),
-- (":GIntegerOpCost:50000:0",0),
-- (":GIntegerOpCost:700000000000214:0",0),
-- (":GIntegerOpCost:1039405893585:0",0),
-- (":GIntegerOpCost:887724585991:151681307594",0),
-- (":GIntegerOpCost:216687582277143495176305109291371049689953502802128912688944719533114555209321457864922857187371596928915882872038937131096470054540865399056926512021460127317071364078414483144461657815698538607705502919016406146007338854812650024908384736771925314581:700000000000214",108),
-- (":GIntegerOpCost:1013072754101725152500680160191900870252404195570377277820307345027976698460749614069984043858785566964520886657975621772620353067676097021161272289774674692942284137581207052031798553269160091882328397733589516881057237994830610419128334580683762918084:796385171824581657324375050900529820562450692768248365131362625494862143251428156205061186671413970035605003785936684641523883013135231622104345777753214565625212773502792568887336895453461553274622894814573110735049899140017960394219949843911837603503",216),
args :: [((Integer, Integer), Gas)]
args =
  [((134699444212584977667, 50000), 0),
  ((700000000000214, 50000), 0),
  ((700000000000214, 50000), 0),
  ((12020670425990641888347454369068145751953125, 1907389171422), 3),
  ((1, 288507), 0),
  ((172860268057275736062015061417832469681223691216411740185828125553714618258759292959560893587580934241103225257246291299707070419516946695614604819153054963669573208911106730476132890228111582230701691602003756911424530280029935929314390848158752457654991, 114976), 110),
  ((173860268057275736062015061417832469681223691216411740185828125553714618258759292959560893587580934241103225257246291299707070419516946695614604819153054963669573208911106730476132890228111582230701691602003756911424530280029935929314390848158752457654991, 1), 110),
  ((6085109382, 285714285714504081632652994466472303227405964181584764462378772657721501346644639426731168638803827899873279972613467311551229597136182909808875509796144143772719464504618054335137159623388972354057992514166045128002812094775153426016740167381189168005972), 110),
  ((1, 714285714285495918367347005533527696772594035818415235537621227342278498653355360573268831361196172100126720027386532688448770402863817090191124490203855856227280535495381945664862840376611027645942007485833954871997187905224846573983259832618810831994028), 110),
  ((50000, 700000000000214), 0),
  ((607510938174979533823716337792575359344482421875, 1), 3),
  ((114976, 528380651766437807737020193599164485931396484375), 3),
  ((1907389171422,-9699535970868310),0),
  ((700000000000214, 50000), 0),
  ((134829396310592344671, 50000), 0),
  ((152439769464614659229, 17610873154022314558), 0),
  ((165149035419536, 50000), 0),
  ((134829396310592344671, 50000), 0),
  ((500, 50000), 0),
  ((700000000000214, 50000), 0),
  ((17610373154022314558, 50000), 0),
  ((134829396310592344671, 50000), 0),
  ((152439769464614659229, 17610373154022314558), 0),
  ((50000, 0), 0),
  ((700000000000214, 0), 0),
  ((1039405893585, 0), 0),
  ((887724585991, 151681307594), 0),
  ((216687582277143495176305109291371049689953502802128912688944719533114555209321457864922857187371596928915882872038937131096470054540865399056926512021460127317071364078414483144461657815698538607705502919016406146007338854812650024908384736771925314581, 700000000000214), 108),
  ((1013072754101725152500680160191900870252404195570377277820307345027976698460749614069984043858785566964520886657975621772620353067676097021161272289774674692942284137581207052031798553269160091882328397733589516881057237994830610419128334580683762918084, 796385171824581657324375050900529820562450692768248365131362625494862143251428156205061186671413970035605003785936684641523883013135231622104345777753214565625212773502792568887336895453461553274622894814573110735049899140017960394219949843911837603503), 216)]
